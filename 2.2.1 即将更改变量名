//加入判断是否被删除的判断条件
//更改变量名



#include<iostream>
#include<vector>
#include<map>
#include<cmath>
#include<algorithm>
#include<set>
using namespace std;
int ddl_rate, late_rate;
class Task {
public:
	string name;
	int lasting_time;
	int label;//fixed 2   ||ddl 1
	int hard;//cost 输入的劳累度 1~
	bool sametimeable;//若为1，则可以同时完成
	int id;//id和索引一致
	int ddl;
	int fixed_start, fixed_end,fixed_day;
	Task(){}
	Task(int id, string name, int label,bool sametimeable, int ddl, int hard, int lasting_time) 
		:id(id), name(name), label(label),sametimeable(sametimeable), ddl(ddl), hard(hard), lasting_time(lasting_time) {
		fixed_start = fixed_end = fixed_day = -1;
	}
	Task(int id, string name, int label, int sametimeable, int hard, int fixed_s,int fixed_e,int fixed_day)
		:id(id), name(name), label(label), sametimeable(sametimeable), ddl(fixed_day), hard(hard), fixed_start(fixed_s),fixed_end(fixed_e),fixed_day(fixed_day) {
		lasting_time = fixed_e - fixed_s;
	}

};
class DDl_Task :public Task {

};
class Block {
public:
	vector<int> Task_source;
	Block(){}
	Block(Task t){
		Task_source.push_back(t.id);
		last_time = t.lasting_time;
		ddl_day = t.ddl;
		label = t.label;//////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
		start_time = t.fixed_start;
		end_time = t.fixed_end;
		day = t.fixed_day;
	}
	Block(Task t1,Task t2){
		Task_source.push_back(t1.id);
		Task_source.push_back(t2.id);
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
		ddl_day = min(t1.ddl,t2.ddl);
		last_time = max(t1.lasting_time, t2.lasting_time);
		label = t1.label + t2.label == 2 ? 1 : 2;
		if (t1.label == 2) {
			start_time = t1.fixed_start;
			end_time = t1.fixed_end;
			day = t1.fixed_day;
		}
		else if (t2.label == 2) {
			start_time = t2.fixed_start;
			end_time = t2.fixed_end;
			day = t2.fixed_day;
		}

	}
	Block(const Block& x, int begin, int end, int days) {
		*this = x;
		start_time = begin;
		end_time = end;
		day = days;
		
	}
	int label=1; //ddl 1  ||fixed 2 默认为1
	int ddl_day;
	int last_time;

	int day,start_time, end_time;//要填入的内容
};
double j_value(const Task&t){

	return -pow(1.5,t.hard)*t.lasting_time;

}
double j_value(const Task t1,const Task t2){
	return -pow(1.5, t1.hard+t2.hard)*(t1.lasting_time+t2.lasting_time);
}
struct node {
	node(){}
	vector<Block> house;
	double val;
	node( vector<Block>b,double v):house(b),val(v){}
};
class alTask {
public:
	vector<Task*> house;
	Task* operator()(int i){
		return house[i];
	}
	alTask(Task*x,int num) {
		Tasksum = num;
		for (int i = 0; i < num; i++) house.push_back(x+i);
	}
	int Tasksum;
};

Task AlTask[8];
alTask allTask(AlTask, 8);
//max_value理解成最好的学习效果
// 用户输入任务难度，越难对应学习效果越差，同时做会让学习效果下降更甚；
//首先，得到一个输入的Task数组


//alTask allTask;

void seperate(vector<Task>& allTask_Task,vector<Task>& able_Task, vector<Task>& independent_Task) {
	for (int i = 0; i < allTask_Task.size(); i++) {
		if (allTask_Task[i].sametimeable == true) {
			able_Task.push_back(allTask_Task[i]);
		}
		else if(allTask_Task[i].sametimeable == false) independent_Task.push_back(allTask_Task[i]);
	}
}
//ddl_Task实际上是all_Task

//获得的Block的ddl,label属性是已经填好的,ddl haiyu shijian\day

void show_Block(const Block& t) {
	cout <<"Block::label "<< t.label << " ";
		cout << " Block::ddl:" << t.ddl_day << " Block::start_time:" << t.start_time << " Block::end_time:" << t.end_time;
		cout << " Block::f_s:" << t.start_time << " Block::f_e" << t.end_time << " Block::f_d" << t.day << " Block::last" << t.last_time;
	cout << endl << "Task::source: ";
	for (int j = 0; j < t.Task_source.size(); j++) {
		cout << " id:" << t.Task_source[j] << " ";
	}
	cout << "--------------------------" << endl;
}
bool operator!=(const Task& a, const Task& b) {
	//Task所有属性都相等
	if (a.ddl != b.ddl || a.fixed_day != b.fixed_day || a.fixed_end != b.fixed_end || a.fixed_start != b.fixed_start
		|| a.hard != b.hard || a.id != b.id || a.label != b.label || a.lasting_time != b.lasting_time
		|| a.name != b.name || a.sametimeable != b.sametimeable) return true;
	return false;
}
bool operator==(const vector<Task>& target, const vector<Task>& model) {
	if (target.size() != model.size()) return false;
	for (int i = 0; i < target.size(); i++) {
		if (target[i] != model[i]) return false;
	}
	return true;
}
int got_index(const vector<Task>&target,const vector<vector<Task>>&get_index) {
	for (int i = 0; i < get_index.size(); i++) {
		if (target == get_index[i]) return i;
	}
}
//vector<Block> get_best_combination(vector<Task>& all_Task) {
//	//将能组合的和不能组合的分开
//	vector<Task>able_Task;
//	vector<Task>independent_Task;
//	seperate(all_Task, able_Task, independent_Task);
//
//	vector<node>dp;
//	vector<vector<Task>>get_index;
//	//初始化
//	vector<Block> Block_now;
//
//	//op代表操作的对象
//	vector<Task> op;
//
//	get_index.push_back(op);//in zero
//	dp.push_back( node(vector<Block>(0), 0));
//
//	Block_now.resize(1);
//	op.resize(1);
//	for (int i = 0; i < able_Task.size(); i++) {
//		op[0] = able_Task[i];
//		Block_now[0] = Block(able_Task[i]);
//		get_index.push_back(op);
//		dp.push_back(node(Block_now, j_value(able_Task[i])));
//	}
//	
//
//	for (int i = 1; i < able_Task.size(); i++) {
//		//不组合
//		//加i 到索引为i-1
//		// 
//		//if (able_Task[i].sametimeable == 1) continue;
//		int index_now = got_index(op, get_index);
//		Block_now = dp[index_now].house;
//		//op表示 0~i-1 的
//		Block_now.push_back(Block(able_Task[i]));
//		int op_index = -1;
//		double max_value = j_value(able_Task[i]) + dp[index_now].val;
//
//
//		//遍历所有可能组合
//		for (int j = 0; j < i; j++) {
//			//状态
//			//这里就没考虑两个fixed在同一时间的情况
//			//目前结果是 fixed与ddl可以混合组合，同时保证了不能fixed
//
//
//			if (able_Task[i].label == 2 && able_Task[j].label == 2) continue;
//			vector<Task> op_copy(op);
//			op_copy.erase(op_copy.begin() + j);//这里用到id与索引一致
//
//			index_now= got_index(op_copy, get_index);
//			Block_now = dp[index_now].house;
//			Block_now.push_back(Block(able_Task[i], able_Task[j]));
//
//			//value
//			double v_now = dp[index_now].val + j_value(able_Task[i], able_Task[j]);
//			if (v_now > max_value) {
//				op_index = j; max_value = v_now;
//			}
//		}
//		if (op_index >= 0) {
//			vector<Task> op_copy(op);
//			op_copy.erase(op_copy.begin() + op_index);//这里用到id与索引一致
//			index_now = got_index(op_copy, get_index);
//			Block_now = dp[index_now].house;
//			Block_now.push_back(Block(able_Task[i], able_Task[op_index]));
//		}
//		else {
//			index_now = got_index(op, get_index);
//			Block_now = dp[index_now].house;
//			Block_now.push_back(Block(able_Task[i]));
//		}
//		op.push_back(able_Task[i]);
//
//		//tong bu update
//		dp.push_back(node(Block_now, max_value));
//		get_index.push_back(op);
//	}
//
//	//加入indepent
//	vector<Block> out(dp.end()->house);
//	for (int i = 0; i < independent_Task.size(); i++) out.push_back(Block(independent_Task[i]));
//	return out;
//}

node combination_dfs(vector<Task>able_Task,vector<vector<Task>>&record, vector<node>& Block_record) {
	if (find(record.begin(), record.end(), able_Task) != record.end()) {
		auto it = find(record.begin(), record.end(), able_Task);
		return Block_record[it - record.begin()];
	}
	if (able_Task.size() == 0) {
		return node(vector<Block>(0), 0);
	}
	Task now_Task = *(able_Task.end() - 1);
	if (able_Task.size() == 1) {
		vector<Block> Block_now;
		Block_now.push_back(Block(now_Task));
		double hmax_value = j_value(now_Task);
		node final_out(Block_now, hmax_value);
		record.push_back(able_Task);
		Block_record.push_back(final_out);
		return final_out;
	}

	//op表示前些项的Task容器
	vector<Task> op(able_Task.begin(), able_Task.end()-1);
	vector<Block> Block_now;
	
	// 
	//buzuhe
	Block_now = combination_dfs(op,record,Block_record).house;
	Block_now.push_back(Block(now_Task));
	double max_value = j_value(now_Task) + combination_dfs(op, record, Block_record).val;
	
	node final_out(Block_now, max_value);

	//组合
	for (int j = 0; j < able_Task.size()-1; j++) {
		//状态
		//这里就没考虑两个fixed在同一时间的情况
		//目前结果是 fixed与ddl可以混合组合，同时保证了不能fixed

		if (now_Task.label == 2 && able_Task[j].label == 2) continue;
		vector<Task> op_copy(op);
		op_copy.erase(op_copy.begin() + j);//这里用到id与索引一致

		//index_now = got_index(op_copy, get_index);
		Block_now = combination_dfs(op_copy, record, Block_record).house;
		Block_now.push_back(Block(now_Task, able_Task[j]));

		//value
		double v_now = combination_dfs(op_copy, record, Block_record).val + j_value(now_Task, able_Task[j]);
		if (v_now > max_value) {
			final_out.house = Block_now;
			final_out.val = v_now;
			max_value = v_now;
		}
	}
	record.push_back(able_Task);
	Block_record.push_back(final_out);
	return final_out;
}
vector<Block> get_best_combination(vector<Task>& all_Task) {
	//将能组合的和不能组合的分开
	
	vector<Task>able_Task;
	vector<Task>independent_Task;
	seperate(all_Task, able_Task, independent_Task);
	
	vector<vector<Task>> record;
	vector<node> Block_record;
	vector<Block>final_out= combination_dfs(able_Task, record, Block_record).house;
	//加入indepent
	for (int i = 0; i < independent_Task.size(); i++) final_out.push_back(Block(independent_Task[i]));
	return final_out;
}
vector<vector<vector<Block>>> get_everyday_source_Block( vector<Block>&allTask_Block) {
	vector<vector<vector<Block>>> outt;
	outt.resize(2);
	outt[0].resize(7);
	outt[1].resize(7);
	for (int day = 0; day <= 6; day++) {
		vector<Block> b;
		vector<Block> c;
		for (int i = 0; i < allTask_Block.size(); i++) {
			if (allTask_Block[i].ddl_day == day) {
				if (allTask_Block[i].label == 2) b.push_back(Block(allTask_Block[i]));
				else if (allTask_Block[i].label == 1) c.push_back(Block(allTask_Block[i]));
			}
		}
		outt[0][day]=b;
		outt[1][day] = c;
	}
	/*for (int i = 0; i < 7; i++) {
		for (int j = 0; j < outt[0][i].size(); j++) {
			show_Block(outt[0][i][j]);
		}
	}*/
	return outt;
}
class PersonalSet {
public:
	double Ddl, Early, Late;
	double ddl_rate; //1 2 3 4 5
	double late_rate;//1 2 3 4 5
	int day_begin, day_end;
	PersonalSet(double ddl_rate, double late_rate, int day_begin,int day_end):ddl_rate(ddl_rate),late_rate(late_rate),day_begin(day_begin),day_end(day_end){}
};

struct slot {
	int day;
	int begin, end;
	slot(int day, int begin, int end):day(day),begin(begin),end(end) {};
};



vector<Block>get_today_Block(const vector<vector<Block>>& ddl_Block,int day) {
	vector<Block>today_Block;
	for (int i = 0; i < ddl_Block[day].size(); i++) {
		if (ddl_Block[day][i].ddl_day != day) continue;
		else today_Block.push_back(ddl_Block[day][i]);
	}
	return today_Block;
}

vector<slot> get_new_slot(vector<slot> cur_slot, int start, int end) {
	for (int i = 0; i < cur_slot.size(); i++) {
		//事件的start和end一定在一个slot内
		if (cur_slot[i].begin < start && cur_slot[i].end >= end) {
			cur_slot[i].end = start - 1; 
		}
		else if (cur_slot[i].begin >= start && cur_slot[i].begin <= end && cur_slot[i].end >= end) {
			cur_slot.erase(cur_slot.begin() + i);
			i--;
		}
	}
	return cur_slot;
}

vector<slot> get_today_slot(const vector<Block>& fixed_Task_Block, vector<slot>& last_slot, int day, int day_beginning, int day_ending) {
	int time_now = day_beginning;
	vector<slot>new_slot;
	for (int i = day_beginning; i < day_ending; i++) {
		new_slot.push_back(slot(day, i, day_ending));
	}
	for (int i = 0; i < fixed_Task_Block.size(); i++) {
		if (fixed_Task_Block[i].ddl_day != day) continue;
		new_slot = get_new_slot(new_slot, fixed_Task_Block[i].start_time, fixed_Task_Block[i].end_time);
	}
	for (int i = 0; i < new_slot.size(); i++) last_slot.push_back(new_slot[i]);
	return last_slot;
}


double get_value(Block Block,int day,double ddl_rate, double late_rate,int day_begining) {
	int through_day = Block.day - day;
	return -abs((Block.end_time - day_begining) / 48.0 - late_rate)
		+ -abs((double(Block.day * 48 + Block.end_time)) / double((day + 1) * 48) - ddl_rate);
}

void dfs(int Block_index,vector<slot>now_slot, const vector<Block>&today_Block,
	double value_now,double& max_value, vector<Block>&record_Block,//这个可以&吗
	vector<Block>&best_arrange, vector<slot>&last_slot, double ddl_rate, double late_rate,int day,int day_begin,int day_end) {
	if (Block_index == today_Block.size()) {
		if (value_now > max_value) {
			best_arrange = record_Block;  max_value = value_now;

			//last_slot存储
			last_slot = now_slot;
		}
		return ;
	}
	for (int i = 0; i < now_slot.size(); i++) { 
		if (today_Block[Block_index].last_time + now_slot[i].begin > now_slot[i].end) continue;

		//填入起始终止时间\day
		Block op=Block(today_Block[Block_index], now_slot[i].begin, today_Block[Block_index].last_time + now_slot[i].begin,day);
		record_Block.push_back(op);

		//get_new_slot(now_slot, now_slot[i].begin, now_slot[i].end);

		dfs(Block_index + 1, get_new_slot(now_slot, now_slot[i].begin, now_slot[i].end), today_Block,
			value_now + get_value(op,day,ddl_rate, late_rate, day_begin),max_value,record_Block,
			best_arrange,last_slot,ddl_rate,late_rate,day,day_begin,day_end);

		record_Block.pop_back();
	}
	//如果存在有无法塞入的点，那么就会无法运行到开头的判断条件
	return;
}



class sort_judge {
public:
	bool operator()(Block& t1, Block& t2) {
		if (t1.day < t2.day) return true;
		else if (t1.day > t2.day)return false;
		else {
			return t1.start_time < t2.start_time;
		}
	}
};
bool time_arrange(vector<vector<Block>>&best_arrange,int day_begin,int day_end,double ddl_rate,double late_rate,vector<Block>Block_combination) {
	
	//首先 得到的Block组中包含最优组合和只能独立完成两部分，其中二者都包括fixed
	//在这个函数中，想将含fixed的Block拎出来，再对不固定时间的Block进行排序

	//传入的是allTask_Task vector<Task>
	// 
	//for (int i = 0; i < Block_combination.size(); i++) show_Block(Block_combination[i]);
	vector<vector<vector<Block>>> source_Block=get_everyday_source_Block(Block_combination);
	vector<vector<Block>>fixed_Task_Block = source_Block[0];
	//排序只需要排ddl性质的Block
	vector<vector<Block>> all_ddl_Block= source_Block[1];
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < all_ddl_Block[i].size(); j++) show_Block(all_ddl_Block[i][j]);
	}
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < fixed_Task_Block[i].size(); j++) show_Block(fixed_Task_Block[i][j]);
	}
	
	//day from 0 to 6
	vector<slot>last_slot;
	for (int day = 0; day <= 6; day++) {
		//last_slot在函数中发生了改变
		vector<slot> today_slot(get_today_slot(fixed_Task_Block[day], last_slot, day, day_begin, day_end));
		
		//先进入今天Block的是ddl
		vector<Block>today_Block (get_today_Block(all_ddl_Block,day));
		
		vector<Block> best_everyday_arrange;
		vector<Block>record;
		double max_value = -1000000;
		dfs(0,today_slot, today_Block,0, max_value,record, best_everyday_arrange, last_slot,ddl_rate,late_rate,day,day_begin, day_end);
		if (best_everyday_arrange.empty()&& !today_Block.empty()) {
			return false;//   直接return可以吗？ 
		}
		//last slot已经在dfs中修改过
		cout << "best_every:???????????????????????????????????" << endl;
		for (int i = 0; i < best_everyday_arrange.size(); i++) show_Block(best_everyday_arrange[i]);
		//放入fixed_Block
		for (int i = 0; i < fixed_Task_Block[day].size(); i++) {
			best_everyday_arrange.push_back(fixed_Task_Block[day][i]);
		}

		//sort making from small to big
		sort(best_everyday_arrange.begin(), best_everyday_arrange.end(), sort_judge());
		best_arrange.push_back(best_everyday_arrange);
	}
	return true;
	//best_arrange应是全局变量
}
class arrange_measure {
public:
	bool operator()(Block t1,Block t2) {

	}
};
vector<set<Block, arrange_measure>> final_set;
//void final_out() {
//	vector<vector<Block>>everyday_fixed_Block = get_everyday_fixed_Block(fixed_Task);
//	for (int day = 0; day <= 6; day++) {
//		set<Block, arrange_measure> everyday;
//		for (int i = 0; i < best_arrange[day].size(); i++) {
//			everyday.insert(best_arrange[day][i]);
//		}
//		for (int i = 0; i < everyday_fixed_Block[day].size(); i++) {
//			everyday.insert(everyday_fixed_Block[day][i]);
//		}
//	}
//}

//读入的是已经读好的allTask
//使用方式：
//首先定义出一个judge=true;
// vector<vector<Block>> Block_temp=arrange_running（.......,judge）；
//判断judge是否为false，进而提示是否需要重新输入，并终止进行
//调用类的成员函数init_day(Block_temp)


vector<vector<Block>> arrange_running(alTask allTask,PersonalSet priority,bool& judge) {
	//首先得到vector<Task>类型的source
	vector<Task>allTask_Task;
	allTask_Task.resize(allTask.Tasksum);
	for (int i = 0; i < allTask.Tasksum; i++) allTask_Task[i]=*allTask(i);

	//进行组合
	vector<Block>Block_combination = get_best_combination(allTask_Task);

	//show
	for (int i = 0; i < Block_combination.size(); i++) {
		show_Block(Block_combination[i]);
	}
	cout << "******组合完成***************************" << endl;
	//进行排列
	vector<vector<Block>>best_arrange;
	judge=time_arrange(best_arrange, priority.day_begin, priority.day_end, priority.ddl_rate, priority.late_rate, Block_combination);
	return best_arrange;
}
//注意，得到的最终结果time可能大于48
//Task AlTask[8];
//alTask allTask(AlTask, 8);
int main() {
	Task AlTask[8];
	//for (int i = 0; i < 3; i++) {
	//	string name;int lasting_time;
	//	int label;//fixed 2   ||ddl 1
	//	int hard;//cost 输入的劳累度 1~
	//	bool sametimeable;//若为1，则只能独立完成
	//	int id;//id和索引一致
	//	int ddl;
	//	int fixed_start, fixed_end;
	//	cin >> name >>label>>hard;
	//	
	//	if (label == 1) {
	//		cin >> ddl>>lasting_time;
	//		AlTask[i] = Task(i, name, label, ddl, hard, lasting_time);
	//	}
	//	if (label == 2) {
	//		cin >> fixed_start >> fixed_end;
	//		AlTask[i] = Task(i, name, label, hard, fixed_start,fixed_end);
	//	}
	//}
	AlTask[0] = Task(0, "math", 1,1, 5, 4, 3);
	AlTask[1] = Task(1, "endglish", 1,1, 5, 4, 3);
	AlTask[2] = Task(2, "program", 2,1,3, 34, 35,2);//hard=3
	AlTask[3] = Task(3, "help", 2,1,3, 25, 26, 1);
	AlTask[4] = Task(4, "aba", 1, 1, 2, 5,4);
	AlTask[5] = Task(5, "wuwuw", 1, 0, 2, 5, 4);
	AlTask[6] = Task(6, "12", 1, 1, 0, 2, 8);
	AlTask[7] = Task(7, "34", 1, 1, 1, 7, 10);
	//cout << AlTask[2].fixed_start << AlTask[2].fixed_end << AlTask[2].fixed_day;
	alTask allTask(AlTask, 8);
	/*for (int i = 0; i < 4; i++) {
		cout << allTask(i)->name << " " << allTask(i)->label << endl;
	}*/
	PersonalSet priority(0.8, 0.8, 16, 46);
	bool judge = 1;
	vector<vector<Block>>best_arrange(arrange_running(allTask, priority, judge));
	if (judge == false) {
		cout << "输入任务太多"; return 0;
	}
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < best_arrange[i].size(); j++) {
			show_Block(best_arrange[i][j]);
		}
	}
}
